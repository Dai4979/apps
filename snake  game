# Snake Game 
import pygame, sys, random, time

class ShowScore:
    def __init__(self):
        pass

    def showScore(choice=1):
        # pop one of them up when game is over
        if snakePos[0] == block[0] and snakePos[1] == block[1]:
            state = "Eat yourself!"
        else:
            if 0 <= score <= 5:
                state = "Boo"
            elif 6 <= score <= 10:
                   state = "Not Bad"
            elif 11 <= score <= 20:
                state = "Cool"
            else:
                state = "Awesome"

        # displays for score, game time, and survival time
        sFont = pygame.font.SysFont("monaco", 24)
        stateFont = pygame.font.SysFont("monaco", 40)
        Ssurf = sFont.render("Score : {0}".format(score), True, black)
        Tsurf = sFont.render("Time :  {0}".format(int(Time)), True, black)
        Suvsurf = sFont.render("Survival Time : {0} sec".format(int(surTime)), True, black)
        Statesurf = stateFont.render("{0}!!".format(state), True, black)
        Srect = Ssurf.get_rect()
        Trect = Tsurf.get_rect()
        Suvrect = Suvsurf.get_rect()
        Staterect = Statesurf.get_rect()

        if choice == 1:
            Srect.midtop = (80, 10)
            Trect.midtop = (80, 25)
            playSurface.blit(Tsurf, Trect)

        else:
            Srect.midtop = (360, 120)
            Suvrect.midtop = (360, 135)
            Staterect.midtop = (360, 180)
            playSurface.blit(Suvsurf, Suvrect)
            playSurface.blit(Statesurf, Staterect)
        playSurface.blit(Ssurf, Srect)



check_errors = pygame.init()

if check_errors[1] > 0:
    print("(!) Had {0} initializing errors, exiting...".format(check_errors[1]))
    sys.exit(-1)
else:
    print("(+) PyGame successfully initialized!!")

# surface
playSurface = pygame.display.set_mode((720, 460))
pygame.display.set_caption("Snake Game")

# colours
red = pygame.Color(255, 0, 0)
green = pygame.Color(0, 255, 0)
black = pygame.Color(0, 0, 0)
white = pygame.Color(255, 255, 255)
brown = pygame.Color(165, 42, 42)
blue = pygame.Color(29, 78, 137)
orange = pygame.Color(246, 146, 86)

# FPS
fpsController = pygame.time.Clock()
snakeSpeed = 20

snakePos = [100, 50]
snakeBody = [[100, 50], [90, 50], [80, 50]]

foodPos = [random.randrange(1, 72) * 10, random.randrange(1, 46) * 10]
foodSpawn = True

speedUp = [random.randrange(1, 72) * 10, random.randrange(1, 46) * 10]
speedUpSpawn = True

speedDown = [random.randrange(1, 72) * 10, random.randrange(1, 46) * 10]
speedDownSpawn = True

direction = "RIGHT"
changeto = direction

score = 0
Time = 10
surTime = 0
food_desappear = random.randrange(5, 8)
speedUp_desappear = random.randrange(3, 7)
speedDown_desappear = random.randrange(4, 6)


# Game over function
def gameOver():
    myFont = pygame.font.SysFont("monaco", 72)
    GOsurf = myFont.render("Game Over!", True, red)
    GOrect = GOsurf.get_rect()
    GOrect.midtop = (720 / 2, 15)
    playSurface.blit(GOsurf, GOrect)
    ShowScore.showScore(0)
    pygame.display.flip()
    time.sleep(4)
    pygame.quit()
    sys.exit()



while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RIGHT or event.key == ord("d"):
                changeto = "RIGHT"
            if event.key == pygame.K_LEFT or event.key == ord("a"):
                changeto = "LEFT"
            if event.key == pygame.K_UP or event.key == ord("w"):
                changeto = "UP"
            if event.key == pygame.K_DOWN or event.key == ord("s"):
                changeto = "DOWN"
            if event.key == pygame.K_ESCAPE:
                pygame.event.post(pygame.event.Event(pygame.QUIT))

    if changeto == "RIGHT" and not direction == "LEFT":
        direction = "RIGHT"
    if changeto == "LEFT" and not direction == "RIGHT":
        direction = "LEFT"
    if changeto == "UP" and not direction == "DOWN":
        direction = "UP"
    if changeto == "DOWN" and not direction == "UP":
        direction = "DOWN"

    if direction == "RIGHT":
        snakePos[0] += 10
        Time -= 0.05
        surTime += 0.05
        food_desappear -= 0.05
        speedUp_desappear -= 0.05
        speedDown_desappear -= 0.05
    if direction == "LEFT":
        snakePos[0] -= 10
        Time -= 0.05
        surTime += 0.05
        food_desappear -= 0.05
        speedUp_desappear -= 0.05
        speedDown_desappear -= 0.05
    if direction == "UP":
        snakePos[1] -= 10
        Time -= 0.05
        surTime += 0.05
        food_desappear -= 0.05
        speedUp_desappear -= 0.05
        speedDown_desappear -= 0.05
    if direction == "DOWN":
        snakePos[1] += 10
        Time -= 0.05
        surTime += 0.05
        food_desappear -= 0.05
        speedUp_desappear -= 0.05
        speedDown_desappear -= 0.05

    snakeBody.insert(0, list(snakePos))
    if snakePos[0] == foodPos[0] and snakePos[1] == foodPos[1]:
        score += 1
        Time += 4
        foodSpawn = False
    else:
        snakeBody.pop()

    # food spawn logic
    if foodSpawn == False:
        foodPos = [random.randrange(1, 72) * 10, random.randrange(1, 46) * 10]
    foodSpawn = True
    if foodSpawn == True and food_desappear < 0:
        foodPos = [random.randrange(1, 72) * 10, random.randrange(1, 46) * 10]
        food_desappear = random.randrange(5, 8)
    foodSpawn == True


    if snakePos[0] == speedUp[0] and snakePos[1] == speedUp[1]:
        score += 2
        snakeSpeed += 3
        Time += 3
        fpsController.tick(snakeSpeed)
        speedUpSpawn = False

    if speedUpSpawn == False:
        speedUp = [random.randrange(1, 72) * 10, random.randrange(1, 46) * 10]
    speedUpSpawn = True
    if speedUpSpawn == True and speedUp_desappear < 0:
        speedUp = [random.randrange(1, 72) * 10, random.randrange(1, 46) * 10]
        speedUp_desappear = random.randrange(5, 8)
    speedUpSpawn == True


    if snakePos[0] == speedDown[0] and snakePos[1] == speedDown[1]:
        score += 1
        snakeSpeed -= 2
        Time += 2
        fpsController.tick(snakeSpeed)
        speedDownSpawn = False

    if speedDownSpawn == False:
        speedDown = [random.randrange(1, 72) * 10, random.randrange(1, 46) * 10]
    speedDownSpawn = True
    if speedDownSpawn == True and speedDown_desappear < 0:
        speedDown = [random.randrange(1, 72) * 10, random.randrange(1, 46) * 10]
        speedDown_desappear = random.randrange(5, 8)
    speedDownSpawn == True

    playSurface.fill(white)

    for pos in snakeBody:
        pygame.draw.rect(playSurface, green,
                         pygame.Rect(pos[0], pos[1], 10, 10))

    pygame.draw.rect(playSurface, brown,
                     pygame.Rect(foodPos[0], foodPos[1], 10, 10))

    pygame.draw.rect(playSurface, blue,
                     pygame.Rect(speedUp[0], speedUp[1], 10, 10))

    pygame.draw.rect(playSurface, orange,
                     pygame.Rect(speedDown[0], speedDown[1], 10, 10))

    # bound
    if snakePos[0] > 710 or snakePos[0] < 0:
        gameOver()
    if snakePos[1] > 450 or snakePos[1] < 0:
        gameOver()
    if Time < 0:
        gameOver()

    for block in snakeBody[1:]:
        if snakePos[0] == block[0] and snakePos[1] == block[1]:
            state = "Eat yourself!"
            gameOver()

    ShowScore.showScore()
    pygame.display.flip()
    fpsController.tick(snakeSpeed)
